package tools.dynamia.actions;

/**
 * Defines a filter for actions, allowing custom logic to be executed before and after an action is performed or executed.
 * <p>
 * Implementations of this interface can intercept action events and execution requests/responses,
 * providing hooks for validation, logging, modification, or other cross-cutting concerns.
 * </p>
 */
public interface ActionSelfFilter {

    /**
     * Invoked before the action is performed.
     * This method can be used to validate or modify the event before the action logic is executed.
     *
     * @param evt the action event that is about to be performed
     */
    default void beforeActionPerformed(ActionEvent evt) {
    }

    /**
     * Invoked after the action is performed.
     * This method can be used for post-processing, logging, or cleanup after the action logic has been executed.
     *
     * @param evt the action event that was performed
     */
    default void afterActionPerformed(ActionEvent evt) {
    }

    /**
     * Invoked before the action execution request is processed.
     * This method allows inspection or modification of the execution request before the action is executed.
     *
     * @param request the action execution request
     */
    default void beforeActionExecution(ActionExecutionRequest request) {
    }

    /**
     * Invoked after the action execution request has been processed.
     * This method allows inspection or modification of the execution response after the action is executed.
     *
     * @param request the original action execution request
     * @param response the response generated by the action execution
     */
    default void afterActionExecution(ActionExecutionRequest request, ActionExecutionResponse response) {
    }
}
