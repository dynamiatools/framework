package tools.dynamia.actions;

/**
 * Interface for filtering and intercepting {@link Action} execution and events.
 * <p>
 * Implementations of this interface can provide custom logic to be executed before and after an action is performed or executed.
 * This is useful for cross-cutting concerns such as validation, logging, auditing, security checks, or modifying the action/event
 * before or after execution.
 * </p>
 * <p>
 * Example usage:
 * <pre>
 *     public class LoggingActionFilter implements ActionFilter {
 *         @Override
 *         public void beforeActionPerformed(Action action, ActionEvent evt) {
 *             // Log before action is performed
 *         }
 *         @Override
 *         public void afterActionPerformed(Action action, ActionEvent evt) {
 *             // Log after action is performed
 *         }
 *         @Override
 *         public void beforeActionExecution(Action action, ActionExecutionRequest request) {
 *             // Validate or modify request before execution
 *         }
 *         @Override
 *         public void afterActionExecution(Action action, ActionExecutionRequest request, ActionExecutionResponse response) {
 *             // Audit or post-process after execution
 *         }
 *     }
 * </pre>
 * </p>
 *
 * @author Mario A. Serrano Leones
 */
public interface ActionFilter {

    /**
     * Invoked before the action is performed.
     * <p>
     * Use this method to validate, log, or modify the action or event before the action logic is executed.
     * </p>
     * @param action the action to be performed
     * @param evt the event context for the action
     */
    default void beforeActionPerformed(Action action, ActionEvent evt) {
    }

    /**
     * Invoked after the action is performed.
     * <p>
     * Use this method for post-processing, logging, or cleanup after the action logic has been executed.
     * </p>
     * @param action the action that was performed
     * @param evt the event context for the action
     */
    default void afterActionPerformed(Action action, ActionEvent evt) {
    }

    /**
     * Invoked before the action execution request is processed.
     * <p>
     * Use this method to inspect, validate, or modify the execution request before the action is executed.
     * </p>
     * @param action the action to be executed
     * @param request the execution request for the action
     */
    default void beforeActionExecution(Action action, ActionExecutionRequest request) {
    }

    /**
     * Invoked after the action execution request has been processed.
     * <p>
     * Use this method to inspect, log, or modify the execution response after the action is executed.
     * </p>
     * @param action the action that was executed
     * @param request the original execution request
     * @param response the response generated by the action execution
     */
    default void afterActionExecution(Action action, ActionExecutionRequest request, ActionExecutionResponse response) {
    }
}
